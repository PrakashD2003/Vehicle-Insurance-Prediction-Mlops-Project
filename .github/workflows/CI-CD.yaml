name: CI/CD Pipeline

on:
  push:
    branches:
      - main

permissions:
  id-token: write      # ← allow the workflow to mint an OIDC token
  contents: read       # ← allow checkout@v3 to pull your code (you still need this)

jobs:
  Continuous_Integration:

    name: Build and Push Docker Image to ECR
    runs-on: self-hosted
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # ────────────────────────────────────────────────────────
      # 1) Configure AWS via OIDC (no long-lived keys needed)
      # ────────────────────────────────────────────────────────
      - name: Reveal runner
        run: |
          echo "Runner name: $RUNNER_NAME"
          echo "Labels: $RUNNER_LABELS"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region:     ap-south-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions
        # Note: You DO NOT need aws-access-key-id / aws-secret-access-key
        # when you have role-to-assume + OIDC set up.

      - name: Who am I?
        run: aws sts get-caller-identity

      # ────────────────────────────────────────────────────────
      # 2) Log in to ECR
      # ────────────────────────────────────────────────────────
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # ────────────────────────────────────────────────────────
      # 3) Bootstrap Buildx (and QEMU)
      # ────────────────────────────────────────────────────────
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # ────────────────────────────────────────────────────────
      # 4) Build & Push
      # ────────────────────────────────────────────────────────
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        env:
          IMAGE_NAME: vehicle-insurance-project-repo
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  Continuous_Deployment:
    name: Deploy to EC2 via Self-Hosted Runner
    needs: Continuous_Integration
    runs-on: self-hosted
    env:
      AWS_DEFAULT_REGION:    ${{ secrets.AWS_DEFAULT_REGION }}
      ECR_REGISTRY:          ${{ secrets.ECR_REGISTRY }}
      IMAGE_NAME:            vehicle-insurance-project-repo
      MONGODB_URL:           ${{ secrets.MONGODB_URL }}
      MONGODB_DATABASE_NAME: ${{ secrets.MONGODB_DATABASE_NAME }}
      MONGODB_COLLECTION_NAME: ${{ secrets.MONGODB_COLLECTION_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # ────────────────────────────────────────────────────────
      # EC2 already has an IAM Instance Profile attached,
      # so no credential setup is needed here.
      # ────────────────────────────────────────────────────────

      - name: Log in to ECR
        run: |
          aws ecr get-login-password \
            --region $AWS_DEFAULT_REGION \
          | docker login \
              --username AWS \
              --password-stdin $ECR_REGISTRY

      - name: Pull & run latest image
        run: |
          docker pull $ECR_REGISTRY/$IMAGE_NAME:latest
          docker rm -f vehicle-insurance-project-repo || true
          docker run -d \
            --name vehicle-insurance-project-repo \
            -p 5000:5000 \
            -e DATABASE_NAME="$MONGODB_DATABASE_NAME" \
            -e COLLECTION_NAME="$MONGODB_COLLECTION_NAME" \
            -e MONGODB_URL="$MONGODB_URL" \
            $ECR_REGISTRY/$IMAGE_NAME:latest

      - name: Verify container is running
        run: docker ps --filter name=vehicle-insurance-project-repo
